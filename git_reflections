To get colored diff output, run git config --global color.ui auto


$ git clone [URL]			downloads a repository (in total) including entire version history


$ git diff [id1] [id2]		compare two commits with id1 and id2 (id1 is the older commit)
							
							-$ git diff 									without arguments compares the working directory and 													the staging area

							-$ git diff	--staged 							difference between staging area and most recent commit	

							-$ git diff [BranchName_1] [BranchName_2]		shows differences between two branches specified by 
							 												[BranchName_1] and [BranchName_2]	



$ git log					lists all commits for the repository
							-$ git log --graph --oneline			lists all commits (one line per commit) with indentation and 
																	ascii graphics to show branches/merges
  
							-$ git log --follow [FileName]			shows revision history for a file (including renames)

							-$ git log -p 							shows the commit log with diffs



$ git checkout				checkout a commit using its id
							-$ git checkout master 			//takes you to the master commit

							-$ git checkout [CommitID]		makes working directory contain files that are in the state that they
							 								were in when the commit with id CommitID was committed.

							-$ git checkout [BranchName]	makes working directory contain files that are in the state that they
							 								were in when the commit at the branch called [BranchName] was committed



$ git reflog				recently referenced commits


$ git init					initialize a git reprository
							$ git init [project_name]		creates a directory named [ProjectName] as a subdirectory
															of current directory and then creates a .git directory
															 as a subdirectory of the directory [ProjectName


$ git reset 				If you accidentally add a file to the staging area, you can remove it using
							-$ git reset --hard		discards any changes in working directory or Staging area


$ git add .					add all the files to the staging area
							The staging area contains a copy of the most recent commit untill we add changes to it.
							$ git add [file_name] 		creates a copy of FileName and places it in staging area


$ git commit 				opens up the editor to write the commit message
							git commit -m "Commit message"   to write commit message via terminal

							git bunbles the entire content of the staging area into a single commit
							and adds that to the reprository.

							Message Structure
							A commit messages consists of three distinct parts separated by a blank line: the title, an optional body and an optional footer. The layout looks like this:

							- type: subject

							- body:

							- footer:
								
							The Type
								The type is contained within the title and can be one of these types:
							  	   feat: a new feature
							  	   fix: a bug fix
							  	   docs: changes to documentation
								   style: formatting, missing semi colons, etc; no code change
								   refactor: refactoring production code
								   test: adding tests, refactoring test; no production code change
								   chore: updating build tasks, package manager configs, etc; no production code change
								The Subject
								   Subjects should be no greater than 50 characters, should begin with a capital letter and do not end with a period.

							The Body
								Not all commits are complex enough to warrant a body, therefore it is optional and only used when a commit requires a bit of explanation and context. Use the body to explain the what and why of a commit, not the how.

								When writing a body, the blank line between the title and the body is required and you should limit the length of each line to no more than 72 characters.

							The Footer
								The footer is optional and is used to reference issue tracker IDs.

							
							Example Commit Message
									feat: Summarize changes in around 50 characters or less

									More detailed explanatory text, if necessary. Wrap it to about 72
									characters or so. In some contexts, the first line is treated as the
									subject of the commit and the rest of the text as the body. The
									blank line separating the summary from the body is critical (unless
									you omit the body entirely); various tools like `log`, `shortlog`
									and `rebase` can get confused if you run the two together.

										Explain the problem that this commit is solving. Focus on why you
										are making this change as opposed to how (the code explains that).
										Are there side effects or other unintuitive consequenses of this
										change? Here's the place to explain them.

										Further paragraphs come after blank lines.

										 - Bullet points are okay, too

										 - Typically a hyphen or asterisk is used for the bullet, preceded
										   by a single space, with blank lines in between, but conventions
										   vary here

										If you use an issue tracker, put references to them at the bottom,
										like this:

										Resolves: #123
										See also: #456, #789




$ git branch				show all the branches
							-$ git branch [name]   			    	creates a branch with the specified name
							-$ git checkout [branch_name]		    to change branch

							-$ git checkout -b [new_branch_name]    //same as the above two commands

							-$ git branch -d [name] 				//delets a branch label



$ git show [commit_id]		shows the changes made in the commit with respect to its parent(the previous commit)
							-$ git show --stat 		shows a single commit most recent


$ git merge branch2 		If you want to merge branch2 into branch1, you can simply git
							checkout branch1 and then type git merge branch2.

							since the two branches are merged, the order in which they are typed into the command
							line does not matter. The key is to remember that git merge always merges all the
							specified branches into the currently checked out branch, creating a new commit for that branch.

							$ git merge [BranchName_1] [BranchName_2]		will combine the two branches such that 
																			[BranchName_1] is new top and the commits
																			in each branch are interleaved based on timestamp


$ git remote				to see all current remotes
							-$ git remote add origin			URL
											  (remote name)		(the reprository where you want to push)
											  					specifies remote for this (typically if you only have one remote this 
											  					is called 'origin' (but could be any name)) the name origin can/will 
											  					be used to reference this remote repository

							-S git remote -v(verbose)			shows the remote name also the URL of the online reprository 


$ git pull [R1] [B1]		downloads from remote called [RemoteName] changes to the branch [BranchName] and 
							updates local repository
							R1 -> [RemoteName]
							B1 -> [BranchName]

$ git pull origin master	the next two lines are equivalent to the line above
							-$ git fetch origin
							-$ git merge master origin/master





Working area/directory may contain any number of files, you can add selected or all the files to a 'Staging area'
using (git add . or git add file1 file2 file3) Staging area consist of a copy of the most recent commit untill we add somthing to it.
Now when you perform git commit it will bundle up all the content of the staging area into one commit in the reprository.


 you should run    "$ git checkout master"    before you commit. This is because your HEAD is still 'detached' 
 from Lesson 1 when you checked out an old commit, and running this command will fix that. You'll learn more 
 about what this command does later this lesson.





Every commit points to its parent.
The commit without a parent is the first commit.
Head point to the current commit




Deleting a branch means deleting its label, its commmit can still be reachable if we successfully merged it with another branch




If a branch is deleted and leaves some commits unreachable from existing branches, those commits will continue to be accessible by 
commit id, until Git’s garbage collection runs. This will happen automatically from time to time, unless you actively turn it off. 
You can also run this process manually with git gc.




"git merge" will also include the currently checked-out branch in the merged version. So if you have branch1 checked out, and you run 
"$ git merge branch2 branch3 ", the merged version will combine branch1 as well as branch2 and branch3. That’s because the branch1 
label will update after you make the merge commit, so it’s unlikely that you didn’t want the changes from branch1 included in the 
merge.For this reason, you should always checkout one of the two branches you’re planning on merging before doing the merge. Which 
one you should check out depends on which branch label you want to point to the new commit.





	Merge Conflict
If you get a message like this
Auto-merging game.js
CONFLICT (content): Merge conflict in game.js
Automatic merge failed; fix conflicts and then commit the result.
then your files were not in the same state as Caroline's when you started the merge. To fix this, complete the following steps:

  -	Restore your files to their state before you started the merge by running "$ git merge --abort"

  -	Double check the state of your files. If you run git log while the master branch is checked out, you should see Caroline's "Add 
	color" commit as the second-most-recent, and the most recent should be your commit fixing the bullet bug. If you use git diff to 
	compare your commit to Caroline's, your commit should introduce the line this.delayBeforeBullet = 10; on line 424. The line 
	should be indented to the same level as the line below it using only spaces (no tabs), and the line should have no spaces after  
	it.Once your file is in the correct state, create a new commit with your changes.
	Try the merge again.




How to push
-First create a reprository on GitHub
-Create a remote in the reprository you want to push
-$ git push origin master


